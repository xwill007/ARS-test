/**
 * Test de Configuraci√≥n ARS
 * 
 * Ejecutar en la consola del navegador para verificar la funcionalidad
 */

// Test 1: Verificar que la configuraci√≥n se guarda correctamente
async function testSaveConfig() {
  console.log('üß™ TEST 1: Verificando guardado de configuraci√≥n');
  
  // Limpiar configuraci√≥n anterior
  localStorage.removeItem('arsconfig-persistent');
  
  // Simular guardado de configuraci√≥n
  const testConfig = {
    arSeparation: 40,
    arWidth: 400,
    arHeight: 500,
    offsetL: -10,
    offsetR: 10,
    zoom: 1.2,
    cameraResolution: "1080p"
  };
  
  // Usar el manager para guardar
  if (window.arsConfigManager) {
    const success = await window.arsConfigManager.saveConfig(testConfig);
    console.log('‚úÖ Configuraci√≥n guardada:', success);
    
    // Verificar que se guard√≥ correctamente
    const stored = localStorage.getItem('arsconfig-persistent');
    if (stored) {
      const parsed = JSON.parse(stored);
      console.log('üíæ Configuraci√≥n en localStorage:', parsed);
      
      if (parsed.userConfig && parsed.userConfig.cameraResolution === "1080p") {
        console.log('‚úÖ TEST 1 PASADO: cameraResolution se guard√≥ correctamente');
      } else {
        console.log('‚ùå TEST 1 FALLIDO: cameraResolution no se guard√≥');
      }
    } else {
      console.log('‚ùå TEST 1 FALLIDO: No hay configuraci√≥n en localStorage');
    }
  } else {
    console.log('‚ùå arsConfigManager no disponible');
  }
}

// Test 2: Verificar que la configuraci√≥n se carga correctamente
async function testLoadConfig() {
  console.log('üß™ TEST 2: Verificando carga de configuraci√≥n');
  
  if (window.arsConfigManager) {
    const config = window.arsConfigManager.loadConfig({
      arSeparation: 24,
      arWidth: 380,
      arHeight: 480,
      offsetL: 0,
      offsetR: 0,
      zoom: 1,
      cameraResolution: '720p'
    });
    
    console.log('üìÇ Configuraci√≥n cargada:', config);
    
    if (config.cameraResolution) {
      console.log(`‚úÖ TEST 2 PASADO: cameraResolution cargada = ${config.cameraResolution}`);
    } else {
      console.log('‚ùå TEST 2 FALLIDO: cameraResolution no est√° presente');
    }
  } else {
    console.log('‚ùå arsConfigManager no disponible');
  }
}

// Test 3: Verificar ciclo completo
async function testFullCycle() {
  console.log('üß™ TEST 3: Verificando ciclo completo');
  
  // Limpiar
  localStorage.removeItem('arsconfig-persistent');
  
  // Establecer configuraci√≥n inicial
  const initialConfig = {
    arSeparation: 24,
    arWidth: 380,
    arHeight: 480,
    offsetL: 0,
    offsetR: 0,
    zoom: 1,
    cameraResolution: '720p'
  };
  
  // Guardar
  if (window.arsConfigManager) {
    await window.arsConfigManager.saveConfig(initialConfig);
    
    // Cargar
    const loadedConfig = window.arsConfigManager.loadConfig(initialConfig);
    
    console.log('üì• Configuraci√≥n inicial:', initialConfig);
    console.log('üì§ Configuraci√≥n cargada:', loadedConfig);
    
    if (loadedConfig.cameraResolution === initialConfig.cameraResolution) {
      console.log('‚úÖ TEST 3 PASADO: Ciclo completo funciona correctamente');
    } else {
      console.log('‚ùå TEST 3 FALLIDO: La configuraci√≥n no se mantiene');
    }
  }
}

// Ejecutar todos los tests
async function runAllTests() {
  console.log('üöÄ Ejecutando todos los tests de configuraci√≥n ARS...');
  
  await testSaveConfig();
  await testLoadConfig();
  await testFullCycle();
  
  console.log('‚úÖ Tests completados');
}

// Exportar funciones para uso en consola
window.testSaveConfig = testSaveConfig;
window.testLoadConfig = testLoadConfig;
window.testFullCycle = testFullCycle;
window.runAllTests = runAllTests;

console.log('üß™ Tests de configuraci√≥n ARS cargados:');
console.log('- testSaveConfig(): Test guardado');
console.log('- testLoadConfig(): Test carga');
console.log('- testFullCycle(): Test ciclo completo');
console.log('- runAllTests(): Ejecutar todos los tests');
